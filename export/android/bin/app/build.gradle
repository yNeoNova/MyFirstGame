import groovy.swing.SwingBuilder
import java.awt.GridBagLayout
import java.awt.GridBagConstraints
import javax.swing.border.EmptyBorder

apply plugin: 'com.android.application'

System.setProperty('java.awt.headless','false')

//Uncomment to debug deprecation warnings.
/* tasks.withType(JavaCompile) {
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
} */

android {
	namespace "com.example.myapp"
	compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
	buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
	ndkPath '/data/data/com.termux/files/home/android-sdk/ndk/25.1.8937393'

	defaultConfig {
		applicationId "com.example.myapp"
		minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
		targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
		versionCode Integer.parseInt(project.VERSION_CODE)
		versionName project.VERSION_NAME
		
	}

	
	File signingFile = file('signing.properties')
	if(signingFile.exists()) {
		Properties signing = new Properties()
		signing.load(new FileInputStream(signingFile))

		signingConfigs {
			release {
				storeFile file(signing["KEY_STORE"])
				storePassword signing["KEY_STORE_PASSWORD"]
				keyAlias signing["KEY_STORE_ALIAS"]
				keyPassword signing["KEY_STORE_ALIAS_PASSWORD"]
			}
		}
	} else {
		signingConfigs {
			release
		}
	}
	

	buildTypes {
		release {
			minifyEnabled false
			signingConfig signingConfigs.release
		}
	}

	android.applicationVariants.all { variant ->
		variant.outputs.all { output ->
			if (outputFileName != null && outputFileName.endsWith('.apk')) {
				outputFileName =  "MyFirstGame-" + variant.buildType.name + ".apk"
			}
		}
	}
}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation project(':deps:extension-api')
	
}

def getPassword(message) {
	def password = '';
	if (System.console() == null) {
		new SwingBuilder().edt {
			dialog(
				title: 'Enter password',
				alwaysOnTop: true,
				size: [350, 150],
				resizable: false,
				locationRelativeTo: null,
				pack: true,
				modal: true,
				show: true
			) {
				lookAndFeel('system')

				panel(border: new EmptyBorder(10, 10, 10, 10)) {
					gridBagLayout()
					def gbc = new GridBagConstraints();

					gbc.gridx = 0
					gbc.gridy = 0
					gbc.fill = GridBagConstraints.HORIZONTAL
					gbc.insets = [0, 0, 10, 0]
					label(
						text: '<html>' +
						'<body style="width: 350px">' +
						message +
						'</body>' +
						'</html>',
						constraints: gbc)

					gbc.gridy = 1
					input = passwordField(constraints: gbc)

					gbc.gridy = 2
					gbc.fill = GridBagConstraints.NONE
					gbc.insets = [0, 0, 0, 0]
					gbc.ipadx = 50
					button = button(
						defaultButton: true,
						text: 'OK',
						actionPerformed: {
							password = input.password
							dispose()
						},
						constraints: gbc)
				}
			}
		}
	} else {
		password = System.console().readPassword(message)
	}
	return new String(password)
}
